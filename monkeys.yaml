# yaml-language-server: $schema=https://schema.zeabur.app/template.json
apiVersion: zeabur.com/v1
kind: Template
metadata:
    name: Monkeys
spec:
    description: üêµ Build Workflow-Centric AI applications
    coverImage: https://avatars.githubusercontent.com/u/160759882?s=200&v=4
    icon: https://avatars.githubusercontent.com/u/160759882?s=200&v=4
    variables:
        - key: PUBLIC_DOMAIN
          type: DOMAIN
          name: Domain
          description: Domain of your Dify app.
    tags:
        - LLM
        - Workflow
        - AI
    readme: |
        Monkeys is an open source tool for build workflow-centric AI applications.
  
    services:
        - name: redis
          icon: https://raw.githubusercontent.com/zeabur/service-icons/main/marketplace/redis.svg
          template: PREBUILT
          spec:
            source:
                image: redis/redis-stack-server:latest
            ports:
                - id: database
                  port: 6379
                  type: TCP
            volumes:
                - id: data
                  dir: /data
            instructions:
                - type: TEXT
                  title: Command to connect to your Redis
                  content: redis-cli -h ${PORT_FORWARDED_HOSTNAME} -p ${DATABASE_PORT_FORWARDED_PORT} -a ${REDIS_PASSWORD}
                - type: TEXT
                  title: Redis Connection String
                  content: redis://:${REDIS_PASSWORD}@${PORT_FORWARDED_HOSTNAME}:${DATABASE_PORT_FORWARDED_PORT}
                - type: PASSWORD
                  title: Redis password
                  content: ${REDIS_PASSWORD}
                  category: Credentials
                - type: TEXT
                  title: Redis host
                  content: ${PORT_FORWARDED_HOSTNAME}
                  category: Hostname & Port
                - type: TEXT
                  title: Redis port
                  content: ${DATABASE_PORT_FORWARDED_PORT}
                  category: Hostname & Port
            env:
                REDIS_ARGS:
                    default: --requirepass ${REDIS_PASSWORD}
                REDIS_CONNECTION_STRING:
                    default: redis://:${REDIS_PASSWORD}@${REDIS_HOST}:${REDIS_PORT}
                    expose: true
                    readonly: true
                REDIS_HOST:
                    default: ${CONTAINER_HOSTNAME}
                    expose: true
                    readonly: true
                REDIS_PASSWORD:
                    default: ${PASSWORD}
                    expose: true
                REDIS_PORT:
                    default: ${DATABASE_PORT}
                    expose: true
                    readonly: true
                REDIS_URI:
                    default: ${REDIS_CONNECTION_STRING}
                    expose: true
                    readonly: true
        - name: db
          icon: https://raw.githubusercontent.com/zeabur/service-icons/main/marketplace/postgresql.svg
          template: PREBUILT
          spec:
            source:
                image: postgres:16
            ports:
                - id: database
                  port: 5432
                  type: TCP
            volumes:
                - id: data
                  dir: /var/lib/postgresql/data
            instructions:
                - type: TEXT
                  title: Connection String
                  content: postgresql://${POSTGRES_USERNAME}:${POSTGRES_PASSWORD}@${PORT_FORWARDED_HOSTNAME}:${DATABASE_PORT_FORWARDED_PORT}/${POSTGRES_DATABASE}
                - type: TEXT
                  title: PostgreSQL Connect Command
                  content: psql "postgresql://${POSTGRES_USERNAME}:${POSTGRES_PASSWORD}@${PORT_FORWARDED_HOSTNAME}:${DATABASE_PORT_FORWARDED_PORT}/${POSTGRES_DATABASE}"
                - type: TEXT
                  title: PostgreSQL username
                  content: ${POSTGRES_USERNAME}
                  category: Credentials
                - type: PASSWORD
                  title: PostgresSQL password
                  content: ${POSTGRES_PASSWORD}
                  category: Credentials
                - type: TEXT
                  title: PostgresSQL database
                  content: ${POSTGRES_DATABASE}
                  category: Credentials
                - type: TEXT
                  title: PostgreSQL host
                  content: ${PORT_FORWARDED_HOSTNAME}
                  category: Hostname & Port
                - type: TEXT
                  title: PostgreSQL port
                  content: ${DATABASE_PORT_FORWARDED_PORT}
                  category: Hostname & Port
            env:
                PGDATA:
                    default: /var/lib/postgresql/data/pgdata
                POSTGRES_CONNECTION_STRING:
                    default: postgresql://${POSTGRES_USERNAME}:${POSTGRES_PASSWORD}@${POSTGRES_HOST}:${POSTGRES_PORT}/${POSTGRES_DATABASE}
                    expose: true
                    readonly: true
                POSTGRES_DATABASE:
                    default: ${POSTGRES_DB}
                    expose: true
                    readonly: true
                POSTGRES_DB:
                    default: monkeys
                POSTGRES_HOST:
                    default: ${CONTAINER_HOSTNAME}
                    expose: true
                    readonly: true
                POSTGRES_PASSWORD:
                    default: ${PASSWORD}
                    expose: true
                POSTGRES_PORT:
                    default: ${DATABASE_PORT}
                    expose: true
                    readonly: true
                POSTGRES_URI:
                    default: ${POSTGRES_CONNECTION_STRING}
                    expose: true
                    readonly: true
                POSTGRES_USER:
                    default: root
                POSTGRES_USERNAME:
                    default: ${POSTGRES_USER}
                    expose: true
                    readonly: true
                POSTGRES_MULTIPLE_DATABASES:
                    default: monkeys,conductor,oneapi
            configs:
              - path: /docker-entrypoint-initdb.d/init-databases.sh
                template: |
                  set -e
                  set -u
                  function create_database() {
                    local database=$1
                    if psql -lqt --username "$POSTGRES_USER"  | cut -d \| -f 1 | grep -qw $database; then
                      echo "Database '$database' already exists"
                      return
                    else
                      echo "Creating database '$database'"
                      psql -v ON_ERROR_STOP=1 --username "$POSTGRES_USER" -d monkeys <<-EOSQL
                        CREATE DATABASE $database;
                        GRANT ALL PRIVILEGES ON DATABASE $database TO root;
                  EOSQL
                      echo "Database '$database' created"
                    fi
                  }

                  if [ -n "$POSTGRES_MULTIPLE_DATABASES" ]; then
                    echo "Multiple database creation requested: $POSTGRES_MULTIPLE_DATABASES"
                    for db in $(echo $POSTGRES_MULTIPLE_DATABASES | tr ',' ' '); do
                      create_database $db
                    done
                    echo "Multiple databases created"
                  fi
        - name: minio
          icon: https://raw.githubusercontent.com/zeabur/service-icons/main/marketplace/minio.svg
          template: PREBUILT
          spec:
            source:
                image: quay.io/minio/minio:latest
                command:
                    - /bin/sh
                args:
                    - -c
                    - |
                      minio server /data --console-address :9090 &
                      MINIO_PID=$!
                      while ! curl -s http://localhost:9000/minio/health/live; do
                        echo 'Waiting for MinIO to start...'
                        sleep 1
                      done
                      sleep 5
                      mc alias set myminio http://localhost:9000 $MINIO_USERNAME $MINIO_PASSWORD
                      echo "Creating bucket '$MINIO_DEFAULT_BUCKET'"
                      mc mb myminio/$MINIO_DEFAULT_BUCKET
                      echo "Setting bucket '$MINIO_DEFAULT_BUCKET' to public"
                      mc anonymous set public myminio/$MINIO_DEFAULT_BUCKET
                      wait $MINIO_PID
            ports:
                - id: web
                  port: 9000
                  type: HTTP
                - id: console
                  port: 9090
                  type: HTTP
            volumes:
                - id: data
                  dir: /data
            instructions:
                - type: URL
                  title: Go to MinIO Console
                  content: ${MINIO_CONSOLE_URL}
                - type: TEXT
                  title: MinIO Username
                  content: ${MINIO_USERNAME}
                - type: PASSWORD
                  title: MinIO Password
                  content: ${MINIO_PASSWORD}
            env:
                MINIO_BROWSER_REDIRECT:
                    default: "false"
                MINIO_CONSOLE_URL:
                    default: ${ZEABUR_CONSOLE_URL}
                    expose: true
                    readonly: true
                MINIO_DEFAULT_BUCKET:
                    default: monkeys
                MINIO_PASSWORD:
                    default: ${MINIO_ROOT_PASSWORD}
                    expose: true
                    readonly: true
                MINIO_ROOT_PASSWORD:
                    default: ${PASSWORD}
                MINIO_ROOT_USER:
                    default: minio
                MINIO_USERNAME:
                    default: ${MINIO_ROOT_USER}
                    expose: true
                    readonly: true
        - name: elasticsearch
          icon: https://static-00.iconduck.com/assets.00/elasticsearch-icon-1839x2048-g9zblqim.png
          template: PREBUILT
          spec:
            source:
                image: docker.elastic.co/elasticsearch/elasticsearch:7.15.0
            ports:
                - id: http
                  port: 9200
                  type: HTTP
                - id: transport
                  port: 9300
                  type: TCP
            volumes:
                - id: data
                  dir: /usr/share/elasticsearch/data
            env:
                discovery.type:
                    default: single-node
                ES_JAVA_OPTS:
                    default: -Xms512m -Xmx512m   
        # - name: pgvector
        #   icon: https://raw.githubusercontent.com/zeabur/service-icons/main/marketplace/postgresql.svg
        #   template: PREBUILT
        #   spec:
        #     source:
        #         image: pgvector/pgvector:pg16
        #     instructions:
        #         - type: TEXT
        #           title: Connection String
        #           content: postgresql://${POSTGRES_USERNAME}:${POSTGRES_PASSWORD}@${PORT_FORWARDED_HOSTNAME}:${DATABASE_PORT_FORWARDED_PORT}/${POSTGRES_DATABASE}
        #         - type: TEXT
        #           title: PostgreSQL Connect Command
        #           content: psql "postgresql://${POSTGRES_USERNAME}:${POSTGRES_PASSWORD}@${PORT_FORWARDED_HOSTNAME}:${DATABASE_PORT_FORWARDED_PORT}/${POSTGRES_DATABASE}"
        #         - type: TEXT
        #           title: PostgreSQL username
        #           content: ${POSTGRES_USERNAME}
        #           category: Credentials
        #         - type: PASSWORD
        #           title: PostgresSQL password
        #           content: ${POSTGRES_PASSWORD}
        #           category: Credentials
        #         - type: TEXT
        #           title: PostgresSQL database
        #           content: ${POSTGRES_DATABASE}
        #           category: Credentials
        #         - type: TEXT
        #           title: PostgreSQL host
        #           content: ${PORT_FORWARDED_HOSTNAME}
        #           category: Hostname & Port
        #         - type: TEXT
        #           title: PostgreSQL port
        #           content: ${DATABASE_PORT_FORWARDED_PORT}
        #           category: Hostname & Port
        #     env:
        #         PGDATA:
        #             default: /var/lib/postgresql/data/pgdata
        #         POSTGRES_CONNECTION_STRING:
        #             default: postgresql://${POSTGRES_USERNAME}:${POSTGRES_PASSWORD}@${POSTGRES_HOST}:${POSTGRES_PORT}/${POSTGRES_DATABASE}
        #             expose: true
        #             readonly: true
        #         POSTGRES_DATABASE:
        #             default: ${POSTGRES_DB}
        #             expose: true
        #             readonly: true
        #         POSTGRES_DB:
        #             default: postgres
        #         POSTGRES_HOST:
        #             default: ${CONTAINER_HOSTNAME}
        #             expose: true
        #             readonly: true
        #         POSTGRES_PASSWORD:
        #             default: ${PASSWORD}
        #             expose: true
        #         POSTGRES_PORT:
        #             default: ${DATABASE_PORT}
        #             expose: true
        #             readonly: true
        #         POSTGRES_URI:
        #             default: ${POSTGRES_CONNECTION_STRING}
        #             expose: true
        #             readonly: true
        #         POSTGRES_USER:
        #             default: root
        #         POSTGRES_USERNAME:
        #             default: ${POSTGRES_USER}
        #             expose: true
        #             readonly: true
        - name: conductor
          icon: https://avatars.githubusercontent.com/u/153258413?s=200&v=4
          template: PREBUILT
          dependencies:
            - db
            - elasticsearch
          spec:
            source:
                image: infmonkeys/conductor-oss:latest
            ports:
                - id: server
                  port: 8080
                  type: HTTP
                - id: ui
                  port: 5000
                  type: HTTP
            configs:
                - path: /app/config/config.properties
                  envsubst: true
                  template: |
                    conductor.grpc-server.enabled=false

                    # postgres
                    conductor.db.type=postgres
                    spring.datasource.url=jdbc:postgresql://${POSTGRES_HOST}:${POSTGRES_PORT}/conductor
                    spring.datasource.username=${POSTGRES_USERNAME}
                    spring.datasource.password=${POSTGRES_PASSWORD}

                    # elasticsearch
                    conductor.indexing.enabled=true
                    conductor.elasticsearch.url=http://${ELASTICSEARCH_HOST}:9200
                    conductor.elasticsearch.indexReplicasCount=1
                    conductor.elasticsearch.clusterHealthColor=yellow

                    # others
                    conductor.app.workflowInputPayloadSizeThreshold=1MB
                    conductor.app.workflowOutputPayloadSizeThreshold=1MB
                    conductor.app.maxWorkflowOutputPayloadSizeThreshold=4GB
                    conductor.app.maxWorkflowInputPayloadSizeThreshold=4GB
                    conductor.app.taskInputPayloadSizeThreshold=1MB
                    conductor.app.taskOutputPayloadSizeThreshold=1MB
                    conductor.app.maxTaskInputPayloadSizeThreshold=4GB
                    conductor.app.maxTaskOutputPayloadSizeThreshold=4GB
                    conductor.app.maxWorkflowVariablesPayloadSizeThreshold=100MB
                    conductor.app.workflowOffsetTimeout=10m
                    conductor.app.asyncUpdateShortRunningWorkflowDuration=10m
        - name: server
          icon: https://avatars.githubusercontent.com/u/160759882?s=200&v=4
          template: PREBUILT
          dependencies:
            - db
            - redis
            - conductor
            - monkey-tools-sandbox
            - monkey-tools-midjourney
            - monkey-tools-internet
          spec:
            source:
                image: infmonkeys/monkeys:latest
            ports:
                - id: server
                  port: 3000
                  type: HTTP
            configs:
                - path: /etc/monkeys/config.yaml
                  envsubst: true
                  template: |
                    server:
                      port: 3000
                      appId: monkeys
                      customization:
                        favicon: https://monkeyminio01.daocloud.cn/monkeys/logo/InfMonkeys-ICO.svg
                        title: Áå¥Â≠êÊó†Èôê
                        logo: 
                          light: https://monkeyminio01.daocloud.cn/monkeys/logo/InfMonkeys-logo-light.svg
                          dark: https://monkeyminio01.daocloud.cn/monkeys/logo/InfMonkeys-logo-dark.svg
                    database:
                      type: postgres
                      host: ${POSTGRES_HOST}
                      port: ${POSTGRES_PORT}
                      username: ${POSTGRES_USERNAME}
                      password: ${POSTGRES_PASSWORD}
                      database: monkeys
                    redis:
                      url: $REDIS_URI
                    auth:
                      enabled:
                        - password
                    s3:
                      endpoint: http://${MINIO_HOST}:9000
                      forcePathStyle: true
                      accessKeyId: ${MINIO_USERNAME}
                      secretAccessKey: ${MINIO_PASSWORD}
                      region: us-east-1
                      bucket: monkeys
                      publicAccessUrl: /minio-statics
                    
                    conductor:
                      baseUrl: http://${CONDUCTOR_HOST}:8080/api
                    
                    tools:
                      - name: monkey-tools-sandbox
                        manifestUrl: http://${MONKEY_TOOLS_SANDBOX_HOST}:3000/manifest.json
                      - name: monkey-tools-midjourney
                        manifestUrl: http://${MONKEY_TOOLS_MIDJOURNEY_HOST}:3000/manifest.json
                      - name: monkey-tools-internet
                        manifestUrl: http://${MONKEY_TOOLS_INTERNET_HOST}:5000/manifest.json

                    oneapi:
                      enabled: true
                      baseURL: http://${ONEAPI_HOST}:3000
                      rootUsername: root
                      rootPassword: "123456"
        - name: oneapi
          icon: https://raw.githubusercontent.com/songquanpeng/one-api/main/web/default/public/logo.png
          template: PREBUILT
          dependencies:
            - db
          spec:
            source:
                image: justsong/one-api:latest
            ports:
                - id: api
                  port: 3000
                  type: HTTP
            env:
              SQL_DSN:
                default: postgres://${POSTGRES_USERNAME}:${POSTGRES_PASSWORD}@${POSTGRES_HOST}:${POSTGRES_PORT}/oneapi
        - name: ui
          icon: https://avatars.githubusercontent.com/u/160759882?s=200&v=4
          template: PREBUILT
          spec:
            source:
                image: infmonkeys/monkeys-ui:latest
            ports:
                - id: web
                  port: 3000
                  type: HTTP
        - name: nginx
          icon: https://www.svgrepo.com/show/373924/nginx.svg
          template: PREBUILT
          dependencies:
            - server
            - ui
          spec:
            source:
                image: nginx:1.27
            ports:
                - id: web
                  port: 80
                  type: HTTP
            configs:
                - path: /etc/nginx/proxy.conf
                  template: |
                    proxy_set_header Host $host; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header X-Forwarded-Proto $scheme; proxy_http_version 1.1; proxy_set_header Connection ""; proxy_buffering off; proxy_read_timeout 3600s; proxy_send_timeout 3600s;
                  permission: null
                - path: /etc/nginx/nginx.conf
                  template: |
                    user  nginx; worker_processes  auto;
                    error_log  /var/log/nginx/error.log notice; pid        /var/run/nginx.pid;
                    events {
                      worker_connections  1024;
                    }
                    http {
                      include       /etc/nginx/mime.types;
                      default_type  application/octet-stream;

                      log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

                      access_log  /var/log/nginx/access.log  main;

                      sendfile        on;
                      keepalive_timeout  65;
                      client_max_body_size 15M;
                      include /etc/nginx/conf.d/*.conf;
                    }
                  permission: null
                - path: /etc/nginx/conf.d/default.conf
                  envsubst: true
                  template: |
                    server {
                      listen 80;
                      server_name _;

                      location /minio/ {
                        proxy_pass http://${MINIO_HOST}:9090/;
                        include proxy.conf;
                      }

                      location /minio-statics/ {
                        proxy_pass http://${MINIO_HOST}:9000/monkeys/;
                        include proxy.conf;
                      }

                      location /conductor-server/ {
                        proxy_pass http://${CONDUCTOR_HOST}:8080/;
                        include proxy.conf;
                      }

                      location /conductor-ui/ {
                        proxy_pass http://${CONDUCTOR_HOST}:8080/;
                        include proxy.conf;
                      }

                      location /oneapi/ {
                        proxy_pass http://${ONEAPI_HOST}:3000/;
                        include proxy.conf;
                      }

                      location /api {
                        proxy_pass http://${SERVER_HOST}:3000;
                        include proxy.conf;
                      }

                      location /v1 {
                        proxy_pass http://${SERVER_HOST}:3000;
                        include proxy.conf;
                      }
                      
                      location /openapi {
                        proxy_pass http://${SERVER_HOST}:3000;
                        include proxy.conf;
                      }

                      location /openapi-json {
                        proxy_pass http://${SERVER_HOST}:3000;
                        include proxy.conf;
                      }

                      location / {
                        proxy_pass http://${UI_HOST}:3000;
                        include proxy.conf;
                      }
                    }
                  permission: null
          domainKey: PUBLIC_DOMAIN
        - name: monkey-tools-sandbox
          icon: https://static.vecteezy.com/system/resources/previews/048/332/149/non_2x/js-icon-transparent-background-free-png.png
          template: PREBUILT
          spec:
            source:
                image: infmonkeys/monkey-tools-sandbox:latest
            ports:
                - id: api
                  port: 3000
                  type: HTTP
            configs:
              - path: /etc/monkey-tools-sandbox/config.yaml
                envsubst: true
                template: |
                  server:
                    port: 3000
        - name: monkey-tools-midjourney
          icon: https://avatars.githubusercontent.com/u/160759882?s=200&v=4
          template: PREBUILT
          spec:
            source:
              image: infmonkeys/monkey-tools-midjourney:latest
            ports:
              - id: api
                port: 3000
                type: HTTP
            configs:
              - path: /usr/src/app/config.yaml
                envsubst: true
                template: |
                  server: 
                    port: 3000

                  s3:
                    endpoint: http://${MINIO_HOST}:9000
                    forcePathStyle: true
                    accessKeyId: ${MINIO_USERNAME}
                    secretAccessKey: ${MINIO_PASSWORD}
                    region: us-east-1
                    bucket: monkeys
                    publicAccessUrl: /minio-statics
        - name: monkey-tools-internet
          icon: https://avatars.githubusercontent.com/u/160759882?s=200&v=4
          template: PREBUILT
          spec:
            source:
              image: infmonkeys/monkey-tools-internet:latest
            ports:
              - id: api
                port: 5000
                type: HTTP
            configs:
              - path: /app/config.yaml
                envsubst: true
                template: |
                  server:
                    port: 5000

        # - name: monkey-tools-knowledge-base
        #   icon: https://avatars.githubusercontent.com/u/160759882?s=200&v=4
        #   template: PREBUILT
        #   spec:
        #     source:
        #       image: infmonkeys/monkey-tools-knowledge-base:latest
        #     ports:
        #       - id: api
        #         port: 5000
        #         type: HTTP
        #     configs:
        #       - path: /app/config.yaml
        #         envsubst: true
        #         template: |
        #           server:
        #             port: 5000
        #           database:
        #             url: postgresql://${POSTGRES_USERNAME}:${POSTGRES_PASSWORD}@${POSTGRES_HOST}:${POSTGRES_PORT}/${POSTGRES_DATABASE}
        #             pool:
        #               pool_size: 30
        #               pool_recycle: 3600
        #           redis:
        #             url: $REDIS_URI
                  
        #           vector:
        #             type: pgvector
        #             pgvector:
        #               url: postgresql://${POSTGRES_USERNAME}:${POSTGRES_PASSWORD}@${POSTGRES_HOST}:${POSTGRES_PORT}/${POSTGRES_DATABASE}

        #           embeddings:
        #             - name: BAAI/bge-base-zh-v1.5
        #               dimension: 768
        #             - name: jinaai/jina-embeddings-v2-base-en
        #               dimension: 768
        #             - name: jinaai/jina-embeddings-v2-small-en
        #               dimension: 512
        #             - name: moka-ai/m3e-base
        #               dimension: 768

